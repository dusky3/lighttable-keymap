;; User keymap
;; -----------------------------
;; Keymaps are stored as a set of diffs that are merged together together
;; to create the final set of keys. You can modify these diffs to either add
;; or subtract bindings.
;;
;; Like behaviors, keys are bound by tag. When objects with those tags are active
;; the key bindings are live. Keys can be bound to any number of Light Table commands,
;; allowing you the flexibility to execute multiple operations together. To see a list
;; of all the commands you can execute, start typing a word related to the thing you
;; want to do in between the square brackets (e.g. type "editor").

{:+ {:app {"cmd-k" [:workspace.show]

           ;; Tabset shortcuts
           "ctrl-shift-]" [:tabset.next]
           "ctrl-shift-[" [:tabset.prev]
           "cmd-alt-=" [:tabset.new]
           "cmd-alt--" [:tabset.close]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]

              ;; Real cheesey line duplicator
              ;; In Light Table 0.6.2 this make the Edit > Copy shortcut
              ;; appear as cmd-shift-d, but it really isn't XD
              "cmd-shift-d" [:editor.select-line
                             :editor.copy
                             :editor.selection.clear
                             :editor.new-line-indent
                             :editor.line-start
                             :editor.paste]

              ;; Why did I have to redefine these???
              "cmd-c" [:editor.copy]
              "cmd-v" [:editor.paste]

              ;; Comment toggling
              "cmd-/" [:toggle-comment-selection]

              ;; Push parens left or right (Slurp)
              "cmd-shift-9" [:paredit.grow.left]
              "cmd-shift-0" [:paredit.grow.right]

              ;; Shrink parens inward (Barf)
              "cmd-shift-." [:paredit.shrink.left]
              "cmd-shift-," [:paredit.shrink.right]

              ;; Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]

              ;; Select the parent expression, whether that's [], {}, or ()
              "shift-alt-s" [:paredit.select.parent]

              ;; Format the parent ()
              "alt-s" [(:paredit.select.parent "(")
                       :smart-indent-selection
                       :paredit.select.clear]

              ;; Toggle console
              "ctrl-c" [:toggle-console]
              
              ;; Good ol' delete forward (used to be doc toggle)
              "ctrl-d" [:editor.delete-char-right]

              ;; Moved doc toggle to here
              "cmd-d" [:editor.doc.toggle]

              ;; Page up/down
              "ctrl-cmd-n" [:editor.page-down]
              "ctrl-cmd-p" [:editor.page-up]}

     :filter-list.input {;;Navigate the command menu with ctrl key.
                         "ctrl-n" [(:filter-list.input.move-selection 1)],
                         "ctrl-p" [(:filter-list.input.move-selection -1)]}}}
